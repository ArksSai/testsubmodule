---
#Visit new scope
Input: Node

if node.type in {Compilation, FuncDef, For, While, If, Else} then
    //create new table
	j <- j + 1
    table_j <- create_symbol_table(j)
    
   if node.type == FuncDef:
       for parameter in node.parameter:
   	    table_j.update_value(parameter, parameter)


---
#Leave scope
Input: Node

//Leave FuncDef: Just leave
if node.type == FuncDef then
	j <- j - 1
	return

//Leave For, While, If: Update last table with current table
if node.type in {For, While, If} then
    table_j = update_table(table_j-1, table_j)
    j <- j -1
	return

//Leave Else: Combine If and Else to If_Else
if node.type == Else then
    table_j-1 = combine_if_else(table_j-1, table_j-2)
    j <- j -1
	return



---
#Visit Assign Node
Input: Node

if node.type == Assign:
    n <- node.target
    v <- node.value
    //if target have been exsisted in table, update value.
    if n in table:
        table_j.update(n, v)
    //if target not in table, means didn't been assign. Add it.
    else:
        //if element of n have been exsisted, replace element with up-to-date value
        for element in v:
            if element in table:
                v <- change_element(v, table)
        table_j.update_value(n, v)


---
#create_symbol_table()
Input: None



---
//#table.update(symbol, value)
//Input: symbol, value
//#built-in



---
#update_table(table_j-2, table_j-1)
Input table_j-2: {'m': [n]}, table_j-1: {'m': ['m - 2', 'm / 2']}
Output {'m': ['n - 2', 'n / 2']}

Input table_j-2: {'m': ['n - 2', 'n / 2']}, table_j-1: {'m': ['m - 4', 'm / 4']}
Output {'m': ['(n - 2) - 4', '(n / 2) - 4', '(n - 2) / 4', '(n / 2) / 4']}


//done: ./ValueNmbering_able.py

//    def add_VN(self, old, new):
//        result = []
//        for new_assign in new:
//            for old_assign in old:
                  if old_assign in new:
				      old_assign
//                result.append(new_assign + old_assign)
//    
//        return result

---
#combine_if_else(if_table, else_table)
Input if: {'l': ['l'], 'm': ['n - 2', 'n / 2'], 'n': ['n']}, else: {'l': ['l - 1'], 'm': ['n - 4', 'n / 4']}
Output if_else: {'l': ['l', 'l - 1'], 'm': ['n - 2', 'n / 2', 'n - 4', 'n / 4'], 'n': ['n']}


//done: ./combine_if_else.py

---
#change_element(value, table)
Input: Table, Table
